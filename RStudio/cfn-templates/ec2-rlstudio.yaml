AWSTemplateFormatVersion: 2010-09-09

Description: Service-Workbench-on-AWS EC2-RStudio-RL
Metadata:
  PartnerName: Relevance Lab
  PartnerURL: https://relevancelab.com
  KnowMore: https://github.com/RLOpenCatalyst/Service_Workbench_Templates/tree/main/RStudio

Parameters:
  Namespace:
    Type: String
    Description: An environment name that will be prefixed to resource names
  SolutionNamespace:
    Type: String
    Description: The namespace value provided when onboarding the Member account
  AmiId:
    Type: String
    Description: Amazon Machine Image for the EC2 instance
  IsAppStreamEnabled:
    Type: String
    AllowedValues: [true, false]
    Description: Is AppStream enabled for this workspace
  InstanceType:
    Type: String
    Description: EC2 instance type to launch
  KeyName:
    Type: String
    Description: Keypair name for SSH access
  AccessFromCIDRBlock:
    Type: String
    Description: The CIDR used to access the ec2 instances.
    Default: 0.0.0.0/0
  S3Mounts:
    Type: String
    Description: A JSON array of objects with name, bucket, and prefix properties used to mount data
  IamPolicyDocument:
    Type: String
    Description: The IAM policy to be associated with the launched workstation
  VPC:
    Description: The VPC in which the EC2 instance will reside
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: The VPC subnet in which the EC2 instance will reside
    Type: AWS::EC2::Subnet::Id
  EnvironmentInstanceFiles:
    Type: String
    Description: >-
      An S3 URI (starting with "s3://") that specifies the location of files to be copied to
      the environment instance, including any bootstrap scripts
  EncryptionKeyArn:
    Type: String
    Description: The ARN of the KMS encryption Key used to encrypt data in the instance
  ACMSSLCertARN:
    Type: String
    Description: The ARN of the AWS Certificate Manager SSL Certificate to associate with the Load Balancer
  EgressStoreIamPolicyDocument:
    Type: String
    Description: The IAM policy for launched workstation to access egress store
  ALBSubnet1:
    Type: String
    Description:  ALBSubnet1 for ALB RStudio
  ALBSubnet2:
    Type: String
    Description: ALBSubnet2 for ALB RStudio
  LoadBalancerType:
    Type: String
    Description: Enter internal if subnets are private subnets or enter internet-facing if subnets are public subnets 
    AllowedValues : ["internal", "internet-facing"]
  AutoStopIdleTimeInMinutes:
    Type: String
    Description: Number of idle minutes for auto stop to shutdown the instance (0 to disable auto-stop)
    
Conditions:
  IamPolicyEmpty: !Equals [!Ref IamPolicyDocument, "{}"]
  EgressStoreIamPolicyEmpty: !Equals [!Ref EgressStoreIamPolicyDocument, "{}"]
  AppStreamEnabled: !Equals [!Ref IsAppStreamEnabled, "true"]
  AppStreamDisabled: !Equals [!Ref IsAppStreamEnabled, "false"]

Resources:
  InstanceRolePermissionBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Permission boundary for EC2 instance role
      ManagedPolicyName:
        !Join ["-", [Ref: Namespace, "ec2-rstudio-permission-boundary"]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'ssm:GetParameter*'
              - 'secretsmanager:GetSecretValue'
              - "s3:*"
              - "ssm:*"
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
              - 'ec2:CreateTags'
              - 'ec2:DeleteTags'
            Resource: "*"
          - Effect: Allow
            Action:
              - "kms:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Resource: !Sub 'arn:${AWS::Partition}:iam::*:role/swb-*'
  IAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join ["-", [Ref: Namespace, "ec2-role"]]
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"

      Policies:
        - !If
          - IamPolicyEmpty
          - !Ref "AWS::NoValue"
          - PolicyName: !Join ["-", [Ref: Namespace, "s3-studydata-policy"]]
            PolicyDocument: !Ref IamPolicyDocument
        - !If
          - EgressStoreIamPolicyEmpty
          - !Ref "AWS::NoValue"
          - PolicyName: !Join ["-", [Ref: Namespace, "s3-egressstore-policy"]]
            PolicyDocument: !Ref EgressStoreIamPolicyDocument
        - PolicyName: !Join ['-', [Ref: Namespace, 'tag-policy']]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:CreateTags'
                  - 'ec2:DeleteTags'
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                Condition:
                  StringLike:
                    ec2:ResourceTag/Name: !Sub '${Namespace}-ec2-rstudio'
        - PolicyName: !Join ['-', [Ref: Namespace, 'config-policy']]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ssm:GetParametersByPath'
                  - 'ssm:GetParameter'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/config/*'
              - Effect: 'Allow'
                Action: 's3:GetObject'
                Resource:
                  - 'arn:aws:s3:::*-sec-apps/*.txt'
                  - 'arn:aws:s3:::*-sec-apps/*.rpm'
                  - 'arn:aws:s3:::*-sec-apps/*.tar'
                  - 'arn:aws:s3:::*-sec-apps/*.zip'
                Condition:
                  StringNotEquals:
                    s3:ResourceAccount: !Sub '${AWS::AccountId}'
              - Effect: 'Allow'
                Action: 'secretsmanager:GetSecretValue'
                Resource:
                  - 'arn:aws:secretsmanager:us-east-1:*:secret:v2*lzprod*'
                  - 'arn:aws:secretsmanager:us-east-1:*:secret:master-fWTVY2'
              - Effect: 'Allow'
                Action:
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                Resource: '*'
        - PolicyName:
            !Join ["-", [Ref: Namespace, "s3-bootstrap-script-policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:GetObject"
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${S3Location}/*"
                  # Remove "s3://" prefix from EnvironmentInstanceFiles
                  - S3Location:
                      !Select [
                        1,
                        !Split ["s3://", !Ref EnvironmentInstanceFiles],
                      ]
              - Effect: "Allow"
                Action: "s3:ListBucket"
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${S3Bucket}"
                  - S3Bucket:
                      !Select [2, !Split ["/", !Ref EnvironmentInstanceFiles]]
                Condition:
                  StringLike:
                    s3:prefix: !Sub
                      - "${S3Prefix}/*"
                      - S3Prefix:
                          !Select [
                            3,
                            !Split ["/", !Ref EnvironmentInstanceFiles],
                          ]
        - PolicyName: !Join ['-', [Ref: Namespace, 'allow-non-account-s3-access']]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:List*'
                Resource: '*'
                Condition:
                  StringNotEquals:
                    s3:ResourceAccount: !Sub '${AWS::AccountId}'
        - PolicyName: param-store-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                  - "ssm:PutParameter"
                Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
      PermissionsBoundary: !Ref InstanceRolePermissionBoundary

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Join ["-", [Ref: Namespace, "ec2-profile"]]
      Path: "/"
      Roles:
        - Ref: IAMRole

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: EC2 workspace security group
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - !If
          - AppStreamEnabled
          - !Ref "AWS::NoValue"
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Ref AccessFromCIDRBlock
      SecurityGroupIngress:
        - !If
          - AppStreamEnabled
          - !Ref "AWS::NoValue"
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref AccessFromCIDRBlock
        - !If
          - AppStreamEnabled
          - !Ref "AWS::NoValue"
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Ref AccessFromCIDRBlock
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: Namespace, "ec2-sg"]]
        - Key: Description
          Value: EC2 workspace security group
      VpcId: !Ref VPC

  EC2Instance:
    Type: "AWS::EC2::Instance"

    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            Encrypted: true
            KmsKeyId: !Ref EncryptionKeyArn

      NetworkInterfaces:
        - AssociatePublicIpAddress: !If [AppStreamEnabled, "false", "true"]
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
            - !If
              - AppStreamEnabled
              - Fn::ImportValue: !Sub "${SolutionNamespace}-WorkspaceSG"
              - !Ref "AWS::NoValue"
          SubnetId: !Ref Subnet

      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: Namespace, "ec2-rstudio"]]
        - Key: Description
          Value: EC2 workspace instance

      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          # Download and execute bootstrap script
          aws s3 cp --region "${AWS::Region}" "${EnvironmentInstanceFiles}/get_bootstrap.sh" "/tmp"
          chmod 500 "/tmp/get_bootstrap.sh"
          /tmp/get_bootstrap.sh "${EnvironmentInstanceFiles}" '${S3Mounts}' "${AWS::Region}" 2>&1 >> "/var/log/bootstrap.log"

          # Customize workspace
          IDLE_TIME="${AutoStopIdleTimeInMinutes}"
          SESSION_TIME=$(($(expr $IDLE_TIME \* 2) > 720 ? $(expr $IDLE_TIME \* 2) : 720)) # minimum 720 or 2(IDLE_TIME)
          sed -i "/^MAX_IDLE_MINUTES /s/=.*$/= $IDLE_TIME/" /usr/local/bin/check-idle
          echo "auth-timeout-minutes=$SESSION_TIME" >> /etc/rstudio/rserver.conf
          mkdir -p /home/rstudio-user/.config/rstudio
          echo '{"initial_working_directory":"~","auto_save_on_blur":true,"auto_save_on_idle":"commit","posix_terminal_shell":"bash"}' > /home/rstudio-user/.config/rstudio/rstudio-prefs.json

          # Signal result to CloudFormation
          /opt/aws/bin/cfn-signal -e $? --stack "${AWS::StackName}" --resource "EC2Instance" --region "${AWS::Region}"

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Name: !Ref Namespace
      Port: 443
      Protocol: HTTPS
      Targets:
        - Id:
            Ref: EC2Instance
          Port: 443
      UnhealthyThresholdCount: 2
      VpcId: !Ref "VPC"

Outputs:
  Ec2WorkspaceDnsName:
    Description: Public DNS name of the EC2 workspace instance
    Value: !GetAtt [EC2Instance, PublicDnsName]

  Ec2WorkspacePublicIp:
    Description: Public IP address of the EC2 workspace instance
    Condition: AppStreamDisabled
    Value: !GetAtt [EC2Instance, PublicIp]

  Ec2WorkspacePrivateIp:
    Description: Private IP address of the EC2 workspace instance
    Value: !GetAtt [EC2Instance, PrivateIp]

  Ec2WorkspaceInstanceId:
    Description: Instance Id for the EC2 workspace instance
    Value: !Ref EC2Instance

  WorkspaceInstanceRoleArn:
    Description: IAM role assumed by the EC2 workspace instance
    Value: !GetAtt IAMRole.Arn

  TargetGroupARN:
    Value: !Ref EC2TargetGroup

  #  Connection related outputs. These outputs need to have prefix "MetaConnection"

  #  The "connections" are derived based on the CFN outputs as follows.

  #

  #  CFN outputs with the OutputKey having format "MetaConnection<ConnectionAttrib>" or "MetaConnection<N><ConnectionAttrib>"

  #  are used for extracting connection information.

  #  - If the environment has only one connection then it can have outputs with "MetaConnection<ConnectionAttrib>" format.

  #  - If it has multiple connections then it can have outputs with "MetaConnection<N><ConnectionAttrib>" format.

  #  For example, MetaConnection1Name, MetaConnection2Name, etc.

  #

  #  The expected CFN output variables used for capturing connections related information are as follows:

  #

  #  - MetaConnectionName (or MetaConnection<N>Name) - Provides name for connection

  #

  #  - MetaConnectionUrl (or MetaConnection<N>Url) - Provides connection url, if available

  #

  #  - MetaConnectionScheme (or MetaConnection<N>Scheme) - Provides connection protocol information such as http, https, ssh, jdbc, odbc etc

  #

  #  - MetaConnectionType (or MetaConnection<N>Type) - Provides type of the connection such as "SageMaker", "EMR", "FOO", "BAR" etc

  #

  #  - MetaConnectionInfo (or MetaConnection<N>Info) - Provides extra information required to form connection url.

  #  For example, in case of MetaConnectionType = SageMaker, the MetaConnectionInfo should provide SageMaker notebook

  #  instance name that can be used to form pre-signed SageMaker URL.

  #

  #  - MetaConnectionInstanceId (or MetaConnection<N>InstanceId) - Provides AWS EC2 instanceId of the instance to connect to when applicable.

  #  Currently this is applicable only when ConnectionScheme = 'ssh'.

  #  This instanceId will be used for sending user's SSH public key using AWS EC2 Instance Connect when user wants to SSH to the instance.

  #

  MetaConnection1Type:
    Description: Type of environment this connection is for
    Value: RStudioV2

  MetaConnection1Name:
    Description: Name for this connection
    Value: RStudio Notebook

  MetaConnection1Scheme:
    Description: Protocol for connection 1
    Value: https

  MetaConnection1InstanceId:
    Description: EC2 Linux Instance Id
    Value: !Ref EC2Instance

  InstanceSecurityGroupId:
    Description: EC2 Instance Security Group Id
    Value: !Ref SecurityGroup

  NeedsALB:
    Description: Flag to specify environment requires ALB
    Value: true

  MaxCountALBDependentWorkspaces:
    Description: Maximum number of ALB dependent Workspaces
    Value: 100
